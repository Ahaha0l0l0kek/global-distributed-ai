import time
from memory.cassandra_client import Memory
from llm.runtime import LLM
from observation.web_scraper import scrape_page
from loguru import logger

AGENT_ID = "agent_001"
SCRAPE_URL = "https://news.ycombinator.com/"  # –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º

class AgentCore:
    def __init__(self):
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ –∞–≥–µ–Ω—Ç–∞...")
        self.memory = Memory()
        self.llm = LLM()

    def observe(self) -> str:
        """–°–∫–∞–Ω–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω—é—é —Å—Ä–µ–¥—É"""
        html = scrape_page(SCRAPE_URL)
        logger.info("üßø OBSERVE: –ü–æ–ª—É—á–µ–Ω HTML.")
        return html

    def plan(self, observation: str) -> str:
        """LLM –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑—É"""
        prompt = f"""
–¢—ã ‚Äî –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç, —Å–∫–∞–Ω–∏—Ä—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.
–í–æ—Ç –≤—ã–¥–µ—Ä–∂–∫–∞ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è):
<<<
{observation}
>>>
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, —á—Ç–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –≤–∞–∂–Ω—ã–º —Å–¥–µ–ª–∞—Ç—å? –û—Ç–≤–µ—Ç—å —á—ë—Ç–∫–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º, –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.
"""
        plan = self.llm.generate(prompt, max_tokens=64)
        logger.info(f"üß† PLAN: {plan}")
        return plan

    def act(self, plan: str) -> str:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ ‚Äî –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ñ–∏–∫—Å–∞—Ü–∏—è –≤ –ª–æ–≥–∞—Ö"""
        logger.info(f"ü§ñ ACT: {plan}")
        # –í –±—É–¥—É—â–µ–º ‚Äî –¥–µ–π—Å—Ç–≤–∏—è: API, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –æ–±—É—á–µ–Ω–∏–µ
        return f"–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {plan}"

    def learn(self, obs: str, plan: str, result: str):
        """–ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å"""
        self.memory.store(AGENT_ID, obs, plan, result)
        logger.info("üß¨ LEARN: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.")

    def print_recent_memory(self):
        recent = self.memory.recent(AGENT_ID)
        if recent:
            logger.info("üß† –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏:")
            for row in recent:
                logger.info(f"[{row.timestamp}] –ü–ª–∞–Ω: {row.plan} ‚Üí –†–µ–∑—É–ª—å—Ç–∞—Ç: {row.result}")

    def run(self):
        logger.info("üöÄ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
        while True:
            try:
                obs = self.observe()
                plan = self.plan(obs)
                result = self.act(plan)
                self.learn(obs, plan, result)
                self.print_recent_memory()
                time.sleep(30)
            except Exception as e:
                logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                time.sleep(10)

if __name__ == "__main__":
    agent = AgentCore()
    agent.run()
