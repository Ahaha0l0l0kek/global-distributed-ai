import asyncio
from loguru import logger
from p2p.protocol import Protocol
from p2p.peer_registry import PeerRegistry
from p2p.router import Router

class P2PNode:
    def __init__(self, agent_id: str = "agent_001", port: int = 9009):
        self.agent_id = agent_id
        self.port = port
        self.registry = PeerRegistry()
        self.router = Router(agent_id=self.agent_id)

    async def handle_connection(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter):
        addr = writer.get_extra_info('peername')
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {addr}")
        self.registry.add(f"{addr[0]}:{addr[1]}")

        while True:
            try:
                data = await reader.readline()
                if not data:
                    break

                message = Protocol.decode(data)
                logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

                response = await self.router.route(message)

                writer.write(Protocol.encode(response))
                await writer.drain()
            except Exception as e:
                logger.error(f"üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                break

        writer.close()
        await writer.wait_closed()
        logger.info(f"üîå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {addr}")

    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        server = await asyncio.start_server(
            self.handle_connection, host="0.0.0.0", port=self.port
        )
        logger.info(f"üöÄ P2P —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
        async with server:
            await server.serve_forever()

    async def send(self, host: str, port: int, message: dict) -> dict:
        """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–æ–º—É —É–∑–ª—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            reader, writer = await asyncio.open_connection(host, port)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ {host}:{port}: {message}")
            writer.write(Protocol.encode(message))
            await writer.drain()

            data = await reader.readline()
            response = Protocol.decode(data)
            logger.info(f"üì• –û—Ç–≤–µ—Ç –æ—Ç {host}:{port}: {response}")

            writer.close()
            await writer.wait_closed()
            return response
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ P2P-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"error": str(e)}

    def add_peer(self, host: str, port: int):
        """–Ø–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ä–∞"""
        self.registry.add(f"{host}:{port}")

    def get_peers(self):
        return self.registry.get_all()
